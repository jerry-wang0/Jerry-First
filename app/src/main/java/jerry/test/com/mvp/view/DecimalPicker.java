package jerry.test.com.mvp.view;import android.app.Activity;import android.content.Context;import android.content.ContextWrapper;import android.graphics.Color;import android.os.Handler;import android.support.v4.app.FragmentActivity;import android.text.Editable;import android.text.InputFilter;import android.text.InputType;import android.text.Spanned;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import java.math.BigDecimal;import java.math.RoundingMode;import cn.nextop.erebor.mid.R;import cn.nextop.erebor.mid.app.mvc.support.widget.text.model.KeypadModel;import cn.nextop.erebor.mid.app.mvc.support.widget.utility.Texts;import cn.nextop.erebor.mid.common.util.Strings;import static cn.nextop.erebor.mid.common.util.Objects.cast;/** * Created by Yanming Qiu on 2015/8/12. */public class DecimalPicker extends LinearLayout implements InputFilter {    //    private View btnSub;    private View btnAdd;    private ImageView ivImage;    private EditTextEx etValue;    //    private int scale = 0;    private Handler handler;    private BigDecimal step;    private BigDecimal value;    private int maxLength = 0;    private boolean keypad = true;    private boolean signed = false;    private boolean editable = true;    private BigDecimal minValue, maxValue;    private OnClickListener listener = null;    private RoundingMode rounding = RoundingMode.DOWN;    protected KeypadPicker dialog = KeypadPicker_.builder().build();    //    public int getScale() { return scale; }    public boolean isSigned() { return signed; }    public BigDecimal getStep() { return step; }    public boolean isKeypad() {        return keypad;    }    public boolean isEditable() { return editable; }    public BigDecimal getValue() { return this.value; }    public BigDecimal getMinValue() { return minValue; }    public BigDecimal getMaxValue() { return maxValue; }    public RoundingMode getRounding() { return rounding; }    public void setStep(BigDecimal step) { this.step = step; }    public void setKeypad(boolean keypad) {        this.keypad = keypad;    }    public void setMaxLength(int maxLength) { this.maxLength = maxLength; }    public void setMinValue(BigDecimal minValue) { this.minValue = minValue; }    public void setMaxValue(BigDecimal maxValue) {  this.maxValue = maxValue; }    public void setRounding(RoundingMode rounding) { this.rounding = rounding; }    //    public interface OnClickListener {        BigDecimal onAdd(DecimalPicker picker, BigDecimal value, BigDecimal step);        BigDecimal onSub(DecimalPicker picker, BigDecimal value, BigDecimal step);    }    /**     *     */    public DecimalPicker(Context context) {        super(context); init();    }    public DecimalPicker(Context context, AttributeSet attrs) {        super(context, attrs); init();    }    public DecimalPicker(Context context, AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle); init();    }    protected void init() {        //        inflate(getContext(), R.layout.widget_decimal_picker, this);        this.btnSub =  findViewById(R.id.item_decimal_picker_sub);        this.btnAdd =  findViewById(R.id.item_decimal_picker_add);        this.ivImage = (ImageView) findViewById(R.id.item_decimal_picker_image);        this.etValue = (EditTextEx) findViewById(R.id.item_decimal_picker_value);        this.dialog.setManager(getActivity().getSupportFragmentManager());        //        this.etValue.setEnabled(this.editable);        this.etValue.setFilters(new InputFilter[]{this});        this.etValue.setInputType((this.keypad) ? InputType.TYPE_NULL : Texts.getInputType(scale > 0, signed));        //        this.etValue.setOnFocusChangeListener(new OnFocusChangeListener() {            @Override            public void onFocusChange(View view, boolean focus) {                if (focus) return;                String s = etValue.getText().toString();                String v = s;                if (v.startsWith("+")) v = v.substring(1, v.length());                if (v.endsWith(".")) v = v.substring(0, v.length() - 1);                if (!Strings.isEquals(s, v)) etValue.setText(v); // Reset text            }        });        this.etValue.addTextChangedListener(new Texts.TextWatcherAdapter() {            @Override            public void afterTextChanged(Editable e) {                if (e.length() == 0) {                    value = null;                } else {                    String v = e.toString();                    if (Strings.isEquals(v, ".", "+", "-")) v = "";                    if (v.endsWith(".")) v = v.substring(0, v.length() - 1);                    value = Strings.isEmpty(v) ? BigDecimal.ZERO : new BigDecimal(v);                }            }        });        this.etValue.setOnTouchListener(new OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if(keypad && isEnabled() && event.getAction() == MotionEvent.ACTION_UP){                    KeypadModel km = new KeypadModel(getValue());                    km.setStep(getStep()); km.setScale(getScale());                    km.setMaxValue(getMaxValue()); km.setMinValue(getMinValue());                    km.setRounding(getRounding()); km.setMaxLength(getMaxLength());                    dialog.show(km, new KeypadPicker.OnSelectListener() {                        @Override                        public void onConfirm(KeypadModel model) {                            //                            setValue(model.getValue());                        }                    });                }                return false;            }        });        //        this.handler = new Handler();        if(!signed) this.minValue = BigDecimal.ZERO;        this.step = BigDecimal.ONE.divide(BigDecimal.TEN.pow(this.scale));        btnAdd.setOnTouchListener(new Views.OnRepeatClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) { addValue(step); }        }, getHandler(), btnAdd, 500L, 120L));        btnSub.setOnTouchListener(new Views.OnRepeatClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) { subValue(step); }        }, getHandler(), btnSub, 500L, 120L));    }    /**     *     */    @Override    public Handler getHandler() {        return this.handler;    }    @Override    public boolean isEnabled() {        return this.etValue.isEnabled();    }    @Override    public void setEnabled(boolean enabled) {        this.etValue.setEnabled(enabled);        this.etValue.setBackgroundColor(enabled ? Color.WHITE : Color.GRAY);    }    public void setHandler(Handler handler) {        this.handler = handler;    }    public OnClickListener getListener() {        return listener;    }    public void setListener(OnClickListener listener) {        this.listener = listener;    }    private FragmentActivity getActivity() {        FragmentActivity activity = null;        final Context context = getContext();        if (context instanceof Activity) activity =  cast(context);        else if (context instanceof ContextWrapper) {            activity = cast(((ContextWrapper)context).getBaseContext());        }        return activity;    }    /**     *     */    protected String format(String message) {        if(message == null) return null;        else return message + "       ";    }    public void setError(final String message) {        this.handler.post(new Runnable() {            @Override            public void run() {                etValue.setError(format(message));            }        });    }    public void setImage(final int resourceId) {        this.handler.post(new Runnable() {            @Override            public void run() {                if(resourceId <= 0) {                    ivImage.setVisibility(View.GONE);                } else {                    ivImage.setVisibility(View.VISIBLE);                    ivImage.setImageResource(resourceId);                }            }        });    }    /**     *     */    public void setValue(BigDecimal value) {        //        if(value == null) {            this.value = null;        } else {            //            if(value.scale() <= this.scale) {                this.value = value;            } else {                this.value = (value = value.setScale(scale, rounding));            }            //            if(minValue != null && this.value.compareTo(minValue) < 0) {                this.value = value = minValue;            }            if(maxValue != null && this.value.compareTo(maxValue) > 0) {                this.value = value = maxValue;            }        }        //        final String text = value == null ? "" : value.toPlainString();        this.handler.post(new Runnable() {            @Override            public void run() { Texts.setText(etValue, text, true); }        });    }    protected void addValue(final BigDecimal step) {        //        if(!isEnabled()) return;        if(listener != null) this.value = listener.onAdd(this, this.value, step);        //        if(this.value == null) {            this.value = this.minValue; if(this.value == null) return;        } else {            this.value = this.value.add(step);            this.value = this.value.setScale(this.scale, rounding);            if(maxValue != null && value.compareTo(maxValue) > 0) { this.value = maxValue; }        }        //        this.handler.post(new Runnable() {            @Override            public final void run() { Texts.setText(etValue, value.toPlainString(), true); }        });    }    protected void subValue(final BigDecimal step) {        //        if(!isEnabled()) return;        if(listener != null) this.value = listener.onSub(this, this.value, step);        //        if(this.value == null) {            this.value = this.minValue; if(this.value == null) return;        } else {            this.value = this.value.subtract(step);            this.value = this.value.setScale(this.scale, rounding);            if(minValue != null && value.compareTo(minValue) < 0) { this.value = minValue; }        }        //        this.handler.post(new Runnable() {            @Override            public final void run() { Texts.setText(etValue, value.toPlainString(), true); }        });    }    /**     *     */    public void setScale(final int scale) {        this.scale = scale;        if(this.keypad) return;        this.handler.post(new Runnable() {            @Override            public void run() { etValue.setInputType(Texts.getInputType(scale > 0, signed)); }        });    }    public void setSigned(final boolean signed) {        this.signed = signed;        if(this.keypad) return;        this.handler.post(new Runnable() {            @Override            public void run() { etValue.setInputType(Texts.getInputType(scale > 0, signed)); }        });    }    /**     *     */    protected int getMaxLength() {        //        if(this.maxLength > 0) {            return this.maxLength;        }        //        if(this.maxValue == null) {            return Byte.MAX_VALUE;        } else if(this.scale <= 0) {            return this.maxValue.setScale(0, RoundingMode.DOWN).toPlainString().length();        } else {            return this.maxValue.setScale(0, RoundingMode.DOWN).toPlainString().length() + 1 + this.scale;        }    }    /**     *     */    @Override    public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {        // Scale        if (end > start) {            final String d = dest.toString();            final String r = d.substring(0, dstart) + source.subSequence(start, end) + d.substring(dend);            int index = r.indexOf("."); if(index >= 0 && ((r.length() - index - 1) > this.scale)) return "";        }        // Length        int keep = getMaxLength() - (dest.length() - (dend - dstart));        if (keep <= 0) {            return "";        } else if (keep >= end - start) {            return null; // keep original        } else {            keep += start;            if (Character.isHighSurrogate(source.charAt(keep - 1))) { --keep; if (keep == start) return ""; }            return source.subSequence(start, keep);        }    }}